
def setupEnvFile(searchParam) {
  if (searchParam !== null && System.properties[searchParam] !== null) {
    return System.properties[searchParam]
  }

  if (System.properties['ENV_FILE_PATH'] == null) {
    // First try searching on project root.
    def projectFileEnv = new File("$rootProject.rootDir/../clearsale.gradle.env")
    def projectFileEnvExists = projectFileEnv.exists()
    if (projectFileEnvExists) {
      System.properties['ENV_FILE_PATH'] = projectFileEnv.path
    } else {
      System.properties['ENV_FILE_PATH'] = System.env.DIRNAME ?: System.env.PWD + "/../clearsale.gradle.env"
    }
  }

  file(System.properties['ENV_FILE_PATH']).readLines().each() {
    def (key, value) = it.tokenize('=');
    if (key !== null && value !== null) {
      System.properties[key] = value
    } else {
      throw new InvalidUserDataException("[CSLIVENESS SDK] - Invalid value for clearsale.gradle.env. Received key: $key, value: $value")
    }
  }

  if (searchParam !== null) {
    return System.properties[searchParam]
  }

  return null
}

setupEnvFile()

buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["CslivenessReactNative_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["CslivenessReactNative_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["CslivenessReactNative_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.cslivenessreactnative"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")

  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

def kotlin_version = getExtOrDefault("kotlinVersion")

rootProject.allprojects {
  repositories {
    google()
    mavenCentral()
    maven {
      url  System.properties['CS_LIVENESS_TEC_ARTIFACTS_FEED_URL']
      name  System.properties['CS_LIVENESS_TEC_ARTIFACTS_FEED_NAME']
      credentials {
        username System.properties['CS_LIVENESS_TEC_USER']
        password  System.properties['CS_LIVENESS_TEC_PASS']
      }
      authentication {
        basic(BasicAuthentication)
      }
    }
  }
}

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-android:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "sale.clear.studio:sdk-csliveness:$System.properties.CS_LIVENESS_VERSION"
}

